/*
QAN AutoApi

Testing QANAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package qan

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/QANplatform/sdk-go"
)

func Test_qan_QANAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test QANAPIService QanBlockNumber", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.QANAPI.QanBlockNumber(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QANAPIService QanCall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.QANAPI.QanCall(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QANAPIService QanChainId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.QANAPI.QanChainId(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QANAPIService QanEstimateGas", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.QANAPI.QanEstimateGas(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QANAPIService QanFeeHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.QANAPI.QanFeeHistory(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QANAPIService QanGasPrice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.QANAPI.QanGasPrice(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QANAPIService QanGetBalance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var address string

		resp, httpRes, err := apiClient.QANAPI.QanGetBalance(context.Background(), address).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QANAPIService QanGetBlockByHash", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hash string
		var transactionDetailFlag bool

		resp, httpRes, err := apiClient.QANAPI.QanGetBlockByHash(context.Background(), hash, transactionDetailFlag).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QANAPIService QanGetBlockByNumber", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockNumber string
		var transactionDetailFlag bool

		resp, httpRes, err := apiClient.QANAPI.QanGetBlockByNumber(context.Background(), blockNumber, transactionDetailFlag).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QANAPIService QanGetBlockReceipts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockNumber string

		resp, httpRes, err := apiClient.QANAPI.QanGetBlockReceipts(context.Background(), blockNumber).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QANAPIService QanGetBlockTransactionCountByHash", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hash string

		resp, httpRes, err := apiClient.QANAPI.QanGetBlockTransactionCountByHash(context.Background(), hash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QANAPIService QanGetBlockTransactionCountByNumber", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockNumber string

		resp, httpRes, err := apiClient.QANAPI.QanGetBlockTransactionCountByNumber(context.Background(), blockNumber).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QANAPIService QanGetCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var address string

		resp, httpRes, err := apiClient.QANAPI.QanGetCode(context.Background(), address).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QANAPIService QanGetFilterChanges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var filterId string

		resp, httpRes, err := apiClient.QANAPI.QanGetFilterChanges(context.Background(), filterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QANAPIService QanGetFilterLogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.QANAPI.QanGetFilterLogs(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QANAPIService QanGetLogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.QANAPI.QanGetLogs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QANAPIService QanGetProof", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.QANAPI.QanGetProof(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QANAPIService QanGetStorageAt", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.QANAPI.QanGetStorageAt(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QANAPIService QanGetTransactionByBlockHashAndIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockHash string
		var index string

		resp, httpRes, err := apiClient.QANAPI.QanGetTransactionByBlockHashAndIndex(context.Background(), blockHash, index).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QANAPIService QanGetTransactionByBlockNumberAndIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockNumber string
		var index string

		resp, httpRes, err := apiClient.QANAPI.QanGetTransactionByBlockNumberAndIndex(context.Background(), blockNumber, index).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QANAPIService QanGetTransactionByHash", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hash string

		resp, httpRes, err := apiClient.QANAPI.QanGetTransactionByHash(context.Background(), hash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QANAPIService QanGetTransactionCount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var address string
		var blockNumber string

		resp, httpRes, err := apiClient.QANAPI.QanGetTransactionCount(context.Background(), address, blockNumber).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QANAPIService QanGetTransactionReceipt", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hash string

		resp, httpRes, err := apiClient.QANAPI.QanGetTransactionReceipt(context.Background(), hash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QANAPIService QanMaxPriorityFeePerGas", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.QANAPI.QanMaxPriorityFeePerGas(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QANAPIService QanNewBlockFilter", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.QANAPI.QanNewBlockFilter(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QANAPIService QanNewFilter", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.QANAPI.QanNewFilter(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QANAPIService QanNewPendingTransactionFilter", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.QANAPI.QanNewPendingTransactionFilter(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QANAPIService QanSendRawTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.QANAPI.QanSendRawTransaction(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QANAPIService QanSyncing", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.QANAPI.QanSyncing(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QANAPIService QanUninstallFilter", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var filterId string

		resp, httpRes, err := apiClient.QANAPI.QanUninstallFilter(context.Background(), filterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QANAPIService QanXlinkValid", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var address string

		resp, httpRes, err := apiClient.QANAPI.QanXlinkValid(context.Background(), address).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
